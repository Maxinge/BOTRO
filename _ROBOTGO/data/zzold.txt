"15::10::400::Frost Diver"
"0::0::0::auto_attack"

"(PICKY)   Mob-ID#1049",
"(CONDOR)   Mob-ID#1009",
"(CHONCHON)   Mob-ID#1011",

<ul class="nsw_warp"><li><a href="#" onmouseover="front(&quot;warp_2910&quot;)" onmouseout="back(&quot;warp_2910&quot;)" onclick="return tag_this(&quot;warp_2910&quot;);" id="t#warp_2910" class="nbu_ml">To moc_fild02 (77, 338)</a>
</li><li><a href="#" onmouseover="front(&quot;warp_2911&quot;)" onmouseout="back(&quot;warp_2911&quot;)" onclick="return tag_this(&quot;warp_2911&quot;);" id="t#warp_2911" class="nbu_ml">To moc_fild02 (77, 338)</a>
</li><li><a href="#" onmouseover="front(&quot;warp_2912&quot;)" onmouseout="back(&quot;warp_2912&quot;)" onclick="return tag_this(&quot;warp_2912&quot;);" id="t#warp_2912" class="nbu_ml">To </a>
</li><li><a href="#" onmouseover="front(&quot;warp_2907&quot;)" onmouseout="back(&quot;warp_2907&quot;)" onclick="return tag_this(&quot;warp_2907&quot;);" id="t#warp_2907" class="nbu_ml">To </a>
</li><li><a href="#" onmouseover="front(&quot;warp_2913&quot;)" onmouseout="back(&quot;warp_2913&quot;)" onclick="return tag_this(&quot;warp_2913&quot;);" id="t#warp_2913" class="nbu_ml">To </a>
</li><li><a href="#" onmouseover="front(&quot;warp_2909&quot;)" onmouseout="back(&quot;warp_2909&quot;)" onclick="return tag_this(&quot;warp_2909&quot;);" id="t#warp_2909" class="nbu_ml">To </a>
</li><li><a href="#" onmouseover="front(&quot;warp_2914&quot;)" onmouseout="back(&quot;warp_2914&quot;)" onclick="return tag_this(&quot;warp_2914&quot;);" id="t#warp_2914" class="nbu_ml">To prt_fild08 (54, 24)</a>
</li><li><a href="#" onmouseover="front(&quot;warp_2908&quot;)" onmouseout="back(&quot;warp_2908&quot;)" onclick="return tag_this(&quot;warp_2908&quot;);" id="t#warp_2908" class="nbu_ml">To </a>
</li></ul>
func remState(str string){
    for kk, vv := range botStates {
       if vv == str {
           botStates = append(botStates[:kk], botStates[kk+1:]...) ; break
       }
   }
}
func addState(str string){
    if !strInArray(str, botStates) {
        botStates = append(botStates, str)
    }
}
func chkState(ss []string) bool{
    for _,vv := range ss {
        if !strInArray(vv, botStates) { return false }
    }
    return true
}

// if botStates == (States{InLockMap:true, HasTargetItem:true, IsLooting:true}) {
//
//     itemBin := make([]byte, 4) ;
//     binary.LittleEndian.PutUint32(itemBin, uint32(targetItem))
//     // fmt.Printf("# loot loot # \n")
//     sendToServer("0362", itemBin)
//     time.Sleep(200 * time.Millisecond)
// }
//
// if botStates == (States{InLockMap:true, HasTargetItem:true}) ||
//    botStates == (States{InLockMap:true, HasTargetItem:true, GoToItem:true}) ||
//    botStates == (States{InLockMap:true, IsWalking:true, HasTargetItem:true}) ||
//    botStates == (States{InLockMap:true, IsWalking:true, HasTargetItem:true, GoToItem:true}) {
//     MUgroundItems.Lock()
//     item := groundItems[targetItem]
//     MUgroundItems.Unlock()
//     nextPoint = item.Coords
//     curPath = pathfind(curCoord, nextPoint, lgatMaps[curMap])
//     pathIndex = 1 ; minDist = 2;
//     botStates.GoToItem = true
// }
//
// if botStates == (States{InLockMap:true, HasTargetMob:true, InCombat:true}) {
//
//     arrayBin := []byte{}
//     att := useAttacks[attackIndex]
//     skillIDBin := make([]byte, 2) ;
//     binary.LittleEndian.PutUint16(skillIDBin, uint16(Stoi(att[0])))
//     skillLVBin := make([]byte, 2) ;
//     binary.LittleEndian.PutUint16(skillLVBin, uint16(Stoi(att[1])))
//     mobBin := make([]byte, 4) ;
//     binary.LittleEndian.PutUint32(mobBin, uint32(targetMob))
//     delay := Stoi(att[2])
//
//     if Stoi(att[0]) != 0 {
//         arrayBin = append(arrayBin,skillLVBin...)
//         arrayBin = append(arrayBin,skillIDBin...)
//         arrayBin = append(arrayBin,mobBin...)
//         sendToServer("0438", arrayBin)
//     }else{
//         arrayBin = append(arrayBin,mobBin...)
//         // 0 = unique autoattack / 7 = start autoattack
//         arrayBin = append(arrayBin,byte(0))
//         sendToServer("0437", arrayBin)
//     }
//
//     if attackIndex < len(useAttacks)-1 { attackIndex++ }else{ attackIndex = 0 }
//     time.Sleep(time.Duration(delay) * time.Millisecond)
//     continue startBotLoop
// }
//
// if botStates == (States{InLockMap:true, HasTargetMob:true}) ||
//    botStates == (States{InLockMap:true, HasTargetMob:true, GoToMob:true}) ||
//    botStates == (States{InLockMap:true, IsWalking:true, HasTargetMob:true}) ||
//    botStates == (States{InLockMap:true, IsWalking:true, HasTargetMob:true, GoToMob:true}) {
//     botStates.InCombat = false
//     MUmobList.Lock() ;  mob := mobList[targetMob] ; MUmobList.Unlock()
//     line := linearInterpolation(curCoord, mob.Coords)
// 	for _,vv := range line {
// 		gatcell := lgatMaps[curMap].cells[vv.X][vv.Y]
// 		if !isValidCell(gatcell) {
//             MUmobList.Lock()
//             delete(mobList, targetMob);
//             MUmobList.Unlock()
//             targetMob = -1;
//             continue startBotLoop
//         }
// 	}
//     nextPoint = mob.Coords
//     curPath = pathfind(curCoord, nextPoint, lgatMaps[curMap])
//     pathIndex = 1 ; minDist = attackDist;
//     botStates.GoToMob = true
// }
//
// if botStates == (States{OnTheRoad:true}) {
//     // fmt.Printf("# newPath OnTheRoad # \n")
//     nextPoint = (Coord{X:route[curMap][0], Y:route[curMap][1]})
//     pathIndex = 0 ; minDist = 1;
//     curPath = pathfind(curCoord, nextPoint, lgatMaps[curMap])
// }
//
// if botStates == (States{InLockMap:true}) {
//     // fmt.Printf("# newPath InLockMap # \n")
//     nextPoint = randomPoint(lgatMaps[curMap],curCoord, 80)
//     pathIndex = 0 ; minDist = 1;
//     curPath = pathfind(curCoord, nextPoint, lgatMaps[curMap])
// }
//
// if botStates == (States{InLockMap:true, IsWalking:true}) ||
//    botStates == (States{OnTheRoad:true, IsWalking:true}) ||
//    botStates == (States{InLockMap:true, IsWalking:true, HasTargetMob:true, GoToMob:true}) ||
//    botStates == (States{InLockMap:true, IsWalking:true, HasTargetItem:true, GoToItem:true}) {
//     if getDist(nextPoint, curCoord) <= float64(minDist) {
//         if botStates.GoToMob == true { botStates.InCombat = true; botStates.GoToMob = false }
//         if botStates.GoToItem == true { botStates.IsLooting = true; botStates.GoToItem = false }
//         curPath = nil; pathIndex = 0 ; continue startBotLoop
//     }
//     if pathIndex > len(curPath)-2 {
//         nextStep = nextPoint
//     }else{
//         nextStep = Coord{curPath[pathIndex].X,curPath[pathIndex].Y}
//     }
//     if getDist(curCoord, nextStep) < 6{ pathIndex += 8 }
//     sendToServer("035F",coordsTo24Bits(nextStep.X,nextStep.Y))
//     time.Sleep(50 * time.Millisecond)
//
//     if botStates.GoToMob == true { continue startBotLoop }
//     if botStates.GoToItem == true { continue startBotLoop }
// }



// #################################
// #################################









distListItems := map[float64]int{}
for kk,vv := range mobList { distListItems[getDist(vv.Coords, curCoord)] = kk }
keys := []float64{}
for kk,_ := range distListItems { keys = append(keys,kk) }
sort.Sort(sort.Float64Slice(keys))

for _,kkk := range keys {
   mob := mobList[distListItems[kkk]]
   if getDist(mob.Coords, curCoord) < 25 {
       MUgroundItems.Unlock()
       targetItem = distListItems[kkk]; continue startBotLoop
   }
}
MUgroundItems.Unlock()

"(PICKY)   Mob-ID#1049",
"(DROPS)   Mob-ID#1113",
"(PICKY_)   Mob-ID#1050",
"(MUKA)   Mob-ID#1055"

[actor_appear][108] -> [[108 0 5 14 92 249 6 0 0 0 0 232 3 0 0 0 0 0 0 0 0 23 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 215 80 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 101 99 111 32 80 101 99 111 32 69 103 103 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 6 243 134 142 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 136 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 215 101 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 97 105 109 111 110 35 111 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][114] -> [[114 0 5 189 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 26 4 0 0 0 0 0 0 0 0 0 0 0 0 112 121 78 159 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 12 87 128 185 115 136 0 0 4 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]

[actor_appear][108] -> [[108 0 5 242 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 213 18 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[FFFF][5BF2]   [16]      -> [[242 91 249 6 16 213 17 21 88 136 75 208 74 159]]
[FFFF][0B21]   [15]      -> [[33 11 0 0 18 0 0 0 0 0 0 0 0]]
[FFFF][0B21]   [15]      -> [[33 11 0 0 18 0 1 13 0 0 0 8 0]]
[FFFF][0B21]   [15]      -> [[33 11 0 0 9 0 0 0 0 0 0 0 0]]
[FFFF][0B21]   [15]      -> [[33 11 0 0 9 0 1 14 0 0 0 1 0]]
[actor_appear][108] -> [[108 0 5 12 92 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 20 148 1 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][114] -> [[114 0 5 243 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 168 216 74 159 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13 211 160 201 55 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][114] -> [[114 0 5 243 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 117 217 74 159 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13 147 144 201 55 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][114] -> [[114 0 5 243 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 115 218 74 159 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13 83 128 201 55 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][114] -> [[114 0 5 243 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 39 219 74 159 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 13 19 112 201 55 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 5 77 92 249 6 0 0 0 0 150 0 0 0 0 0 0 0 0 0 241 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 12 150 118 0 0 0 5 0 0 0 255 255 255 255 255 255 255 255 0 0 0 67 111 110 100 111 114 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 5 236 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 12 214 118 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 5 189 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 26 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 151 18 0 0 0 4 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 5 239 91 249 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 215 34 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 5 14 92 249 6 0 0 0 0 232 3 0 0 0 0 0 0 0 0 23 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 215 80 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 101 99 111 32 80 101 99 111 32 69 103 103 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][108] -> [[108 0 6 243 134 142 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 136 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 215 101 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 97 105 109 111 110 35 111 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]


[actor_appear][108] -> [[108 0 5 38 170 245 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 38 202 246 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[actor_appear][114] -> [[114 0 5 40 170 245 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 184 13 195 156 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 37 200 66 92 135 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]

 [[10 0  15 0    43 55 243       6]]
 [[1 0   14 0    2 55 243        6]]
 [[10 0  15 0    12 55 243       6]]
 [[1 0   14 0    93 55 243       6]]
 [[1 0   14 0    86 55 243       6]]
 [[1 0   14 0    151 55 243      6]]
 [[1 0   14 0    151 55 243      6]]
 [[10 0  15 0    114 55 243      6]]
 [[10 0  15 0    243 54 243      6]]
 [[1 0   14 0    8 55 243        6]]
 [[1 0   14 0    59 55 243       6]]
 [[10 0  15 0    134 55 243      6]]

 204 10 74 188 30 0 6 0 0 0 0 0 0 0 1 0 0 0
 204 10 74 188 30 0 4 0 0 0 0 0 0 0 2 0 0 0
 150 1 255 255 102 170 245 6 0
 221 10 245 81 8 0 148 3 0 0 3 0 1 65 0 106 1 3 3 1 0 0 0 0]

 221 10 91 52 10 0 5 2 0 0 0 0 1 222 0 236 0 3 3 2 0 0 0 0
 [0x300a][54]     [mob_info]     bb ->   [[95 55 243 6 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 72 80 58 32 48 47 53 53 0 124 32 0 0 0 0 0 71 0 0 0 0 0 0 0 0 0]]
 [0xdd0a][26]     [item_appear]  bb ->   [[141 193 28 0 214 6 0 0 10 0 1 139 0 207 0 9 6 1 0 0 0 0 221 10 142 193]]
 [0xdd0a][26]     [item_appear]  bb ->   [[143 193 28 0 148 3 0 0 3 0 1 138 0 205 0 12 9 1 0 0 0 0 221 10 144 193]]
 [0xdd0a][22]     [item_appear]  bb ->   [[145 193 28 0 141 3 0 0 3 0 1 137 0 205 0  3 3 1 0 0 0 0]]


80 173 28 0 214 6 0 0 10 0 1 160 0 133 0 6 9 1 0 0 0 0 221 10 81 173 28 0 149 3 0 0 3 0 1 161

[[115 165 2 0]]

[[107 165 2 0

[
108 0 5 69 55 243 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18 201 176 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
253 9 114 0 5 116 55 243 6 0 0 0 0 150 0 0 0 0 0 0 0 0 0 241 3 0 0 0 0 0 0 0 0 0 0 0 0 125 56 213 154 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 24 137 177 140 155 136 0 0 5 0 0 0 255 255 255 255 255 255 255 255 0 0 0 67 111 110 100 111 114 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
255 9 108 0 5 54 55 243 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 26 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 15 74 4 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 135 0 125 56 213 154 20 203 17 40 168 136]

135 0 63 146 174 139 47 139 83 24 189 136]]
item_disappear [0xa100]         bb ->   [[99 170 2 0   161 0 97 170   2 0 161 0   98 170 2 0]]

item_disappear [0xa100]         bb ->   [[138 170 2 0]]

mapID ->        [[200 108 1 0]]
mapID ->        [[204 108 1 0]]
mapID ->        [[207 108 1 0]]
mapID ->        [[209 108 1 0]]
greed [0x1a0b]  bb ->   [[74 188 30 0 74 188 30 0 0 0 0 0 245 3 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 7 0 19 2 0 0 131 9 46 0 74 188 30 0 1 232 3 0 0 232 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 9 245 3 1 0 0 0

74 188 30 0 74 188 30 0 1 55 10 10 0 1 0 201 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 182 105 0 0 138 0
74 188 30 0 209 108 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 83 255 1 139 0 161 0 209 108 1 0 55 10 17 0 2 0 214 6 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 128 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 184 105 0 0 138 0
74 188 30 0 207 108 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 83 255 1 139 0 161 0 207 108 1 0 55 10 18 0 2 0 141 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 204 105 0 0 138 0
74 188 30 0 204 108 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 83 255 1 139 0 161 0 204 108 1 0 55 10 21 0 2 0 148 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 224 105 0 0 138 0
74 188 30 0 200 108 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 83 255 1 139 0 161 0 200 108 1 0]]


[[3 0 1 0 0 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 74 105 0 0 138 0 74 188 30 0 243 130 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 126 148 1 139 0 161 0 243 130 1 0]]



mapID ->        [[214 115 1 0]]
greed [0x1a0b]  bb ->   [[74 188 30 0 74 188 30 0 0 0 0 0 245 3 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 7 0 9 2 0 0 131 9 46 0 74 188 30 0 1 232 3 0 0 232 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 9 245 3 1 0 0 0
74 188 30 0 74 188 30 0 1 55 10 21 0 2 0 148 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 224 105 0 0 138 0
74 188 30 0 214 115 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 143 207 1 139 0 161 0 214 115 1 0]]










greed [0x1a0b]  bb ->   [[23 110 222 6 23 110 222 6 0 0 0 0 197 0 0 0 0 0 0 0 0 0 0 0 0 0 0 192 0 23 110 222 6 2 134 0 23 110 222 6 26 16 193 169 9 136 126 17 81 139]]

 [[
 74 188 30 0 74 188 30 0 0 0 0 0 245 3 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 7 0 19 2 0 0 131 9 46 0 74 188 30 0 1 232 3 0 0 232 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 203 9 245 3 1 0 0 0 74 188 30 0 74 188 30 0 1 55 10 3 0 2 0 141 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 176 0 24 0 162 105 0 0 138 0 74 188 30 0 99 48 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0
 177 183 1 139 0 161 0 99 48 1 0 55 10 10 0 2 0 148 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 176 0 24 0 182 105 0 0 138 0 74 188 30 0 94 48 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0
 178 183 1 139 0 161 0 94 48 1 0 55 10 17 0 2 0 214 6 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 128 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 176 0 24 0 184 105 0 0 138 0 74 188 30 0 84 48 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0
 179 183 1 139 0 161 0 84 48 1 0 55 10 18 0 2 0 149 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 176 0 24 0 204 105 0 0 138 0 74 188 30 0 115 48 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0
 179 183 1 139 0 161 0 115 48 1 0 55 10 21 0 1 0 201 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 176 0 24 0 224 105 0 0 138 0 74 188 30 0 92 48 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0

 180 183 1 139 0 161 0 92 48 1 0]]

5
 [[74 188 30 0 74 188 30 0 0 0 0 0 245 3 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 7 0 19 2 0 0 131 9 46 0 74 188 30 0 1 232 3 0 0 232 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 9 245 3 1 0 0 0 74 188 30 0 74 188 30 0

 1 55 10 3 0 2 0 141 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 162 105 0 0 138 0 74 188 30 0 154 75 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 211 183 1 139 0 161 0 154 75 1 0 55 10 10 0 2 0 149 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 182 105 0 0 138 0 74 188 30 0 111 75 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 212 183 1 139 0 161 0 111 75 1 0 55 10 17 0 1 0 201 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 202 105 0 0 138 0 74 188 30 0 108 75 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 213 183 1 139 0 161 0 108 75 1 0 55 10 18 0 2 0 148 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 222 105 0 0 138 0 74 188 30 0 102 75 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 213 183 1 139 0 161 0 102 75 1 0 55 10 21 0 2 0 214 6 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 128 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 224 105 0 0 138 0 74 188 30 0 121 75 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 214 183 1 139 0 161 0 121 75 1 0]]

2
 [[74 188 30 0 74 188 30 0 0 0 0 0 245 3 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 7 0 19 2 0 0 131 9 46 0 74 188 30 0 1 232 3 0 0 232 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 9 245 3 1 0 0 0 74 188 30 0 74 188 30 0

 1 55 10 18 0 2 0 214 6 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 128 0 0 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 204 105 0 0 138 0 74 188 30 0
 165 76 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 26 19 1 139 0 161 0 165 76 1 0 55 10 21 0 2 0 148 3 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 176 0 24 0 224 105 0 0 138 0 74 188 30 0 167 76 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 26 19 1 139 0 161 0 167 76 1 0]]


[[23 0 10 0 7 2 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

176 0 24 0 0 46 0 0 138 0 74 188 30 0
161 24 1 0 124 85 85 85 0 0 0 0 0 0 0 0 0 0 176 96 1 139 0 161 0 161 24 1 0]]

vv ->[[66 17 16 0 167 3 0 0 3 0 1 122 0 4 1 3 12 41 0 0 0 0
      176 0 24 0 202 38 0 0 175 0 28 0 41 0]]

vv ->[[93 17 16 0 214 6 0 0 10 0 1 124 0 3 1 3 12 44 0 0 0 0]]
vv ->[[94 17 16 0 167 3 0 0 3 0 1 122 0 4 1 9 12 41 0 0 0 0]]
vv ->[[95 17 16 0 242 3 0 0 3 0 1 122 0 5 1 12 3 1 0 0 0 0]]
vv ->[[96 17 16 0 141 3 0 0 3 0 1 122 0 3 1 9 12 1 0 0 0 0]]

vv ->[[233 84 16 0   214 6 0 0  10 0 1  217 0 71 0   12 12    1 0 0 0 0   ]]
vv ->[[234 84 16 0   149 3 0 0  3 0 1   216 0 70 0   12 3     1 0 0 0 0   ]]
vv ->[[20 85 16 0    214 6 0 0  10 0 1  217 0 70 0   3 12     45 0 0 0   0    176 0 24 0 84 41 0 0 175 0 28 0 45 0]]
    [[249 96 16 0    214 6 0 0  10 0 1  155 0 95 0   6 12     21 4 0 0    0 176 0 24 0 34 41 0 0 175 0 28 0 21 4]]
    [[38 110 16 0    167 3 0 0  3 0 1   86 0 22 1    6 9      41 0 0 0      0      176 0 24 0 157 43 0 0 175 0 29 0 41 0]]

vv ->[[231 187 15 0 5 2 0 0 0 0 1 143 0 194 0 9 3 1 0 0 0 0]]
vv ->[[232 187 15 0 149 3 0 0 3 0 1 143 0 196 0 9 9 1 0 0 0 0]]
vv ->[[20 189 15 0 148 3 0 0 3 0 1 251 0 239 0 6 3 1 0 0 0 0]]
 bb ->[[255 189 15 0 148 3 0 0 3 0 1 74 0 34 1 9 6 1 0 0 0 0]]
 v ->[[209 195 15 0 167 3 0 0 3 0 1 74 0 20 1 3 6 41 0 0 0 0]]
 vv ->[[210 195 15 0 149 3 0 0 3 0 1 75 0 19 1 3 3 75 0 0 0 0]]
 vv ->[[211 195 15 0 201 2 0 0 3 0 1 76 0 21 1 3 9 1 0 0 0 0]]
 vv ->[[212 195 15 0 201 2 0 0 3 0 1 76 0 20 1 6 12 1 0 0 0 0]]
 vv ->[[213 195 15 0 141 3 0 0 3 0 1 74 0 19 1 6 9 1 0 0 0 0]]
>
[[105 99 216 6 67 111 110 100 111 114 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 72 80 58 32 48 47 57 50 0 124 32 0 0 0 0 0 197 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 105 99 216 6 0 0 0 0 150 0 0 0 0 0 0 0 0 0 241 3 0 0 0 0 0 0 0 0 0 0 0 0 144 226 78 135 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 55 69 35 116 82 136 0 0 5 0 0 0 92 0 0 0 0 0 0 0 0 0 0 67 111 110 100 111 114 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 10 1 0 46 25 38 0 0 0 0 0 203 10 2 0 58 202 31 0 0 0 0 0 204 10 74 188 30 0 13 0 0 0 0 0 0 0 1 0 0 0 204 10 74 188 30 0 9 0 0 0 0 0 0 0 2 0 0 0 150 1

255 255 105 99 216 6 0
255 255 51 99 216 6 0]]

221 10 244 15 13 0  148 3    0 0 3 0 1 220 0 81     0 12 12 1 0 0 0 0
221 10 245 15 13 0  214 6    0 0 10 0 1 220 0 82    0 9 9 1 0 0 0 0
221 10 246 15 13 0  149 3    0 0 3 0 1 222 0 82     0 6 3 1 0 0 0 0]]

[[     204 23 13 0  0 2      0 0 0 0 1 226 0 81     0 9 3 8  0 0 0 0   176 0 24     0 29 33 0 0 175 0 23 0 8 0]]
[[     209 23 13 0  251 1    0 0 0 0 1 224 0 81     0 3 3 13 0 0 0 0   176 0 24     0 151 31 0 0 175 0 20 0 13 0]]
[[     216 23 13 0  7 2      0 0 0 0 1 226 0 80     0 6 6 10 0 0 0 0   176 0 24     0 107 30 0 0 175 0 19 0 10 0]]
[[     16 198 15 0  203 2 0 0 3 0 1 79  0 14 1 6   9 1 0 0  0 0 221 10 17 198 15 0 149 3  0 0 3 0    1 79 0 13  1 3 12 1  0 0 0 0]]


[[51 99 216 6 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 72 80 58 32 48 47 56 56 0 124 32 0 0 0 0 0 169 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 51 99 216 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 26 4 0 0 0 0 0 0 0 0 0 0 0 0 252 170 87 135 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 53 133 131 88 88 136 0 0 3 0 0 0 88 0 0 0 0 0 0 0 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 10 1 0 53 25 38 0 0 0 0 0 203 10 2 0 58 202 31 0 0 0 0 0 204 10 74 188 30 0 7 0 0 0 0 0 0 0 1 0 0 0 204 10 74 188 30 0 6 0 0 0 0 0 0 0 2 0 0 0 150 1




[237 98 216 6 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 72 80 58 32 48 47 56 56 0 124 32 0 0 0 0 0 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 237 98 216 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 26 4 0 0 0 0 0 0 0 0 0 0 0 0 134 71 131 134 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 41 7 242 144 127 136 0 0 4 0 0 0 88 0 0 0 0 0 0 0 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 10 1 0 10 21 38 0 0 0 0 0 203 10 2 0 58 202 31 0 0 0 0 0 204 10 74 188 30 0 7 0 0 0 0 0 0 0 1 0 0 0 204 10 74 188 30 0 6 0 0 0 0 0 0 0 2 0 0 0 150 1 255 255 237 98 216 6 0]]
[[74 99 216 6 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
72 80 58 32 48 47 53 53 0 124 32 0 255 127 0 0 96 125 122 85 85 85 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
253 9 114 0 5 74 99 216 6 0 0 0 0 144 1 0 0 0 0 0 0 0 0 89 4 0 0 0 0 0 0 0 0 0 0 0 0
106 8 133 134 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
56 206 211 140 237 136 0 0 3 0 0 0 55 0 0 0 0 0 0 0 0 0 0
68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
203 10 1 0 36 21 38 0 0 0 0 0 203 10 2 0 58 202 31 0 0 0 0 0 204 10 74  188 30 0 6 0 0 0 0 0 0 0 1 0 0 0 204 10 74 188 30 0 4 0 0 0 0 0 0 0 2 0 0 0
150 1 255 255 74 99 216 6 0 221 10 179 41 10 0 149 3 0 0 3 0 1

226 0 236 0 3 6 1 0 0 0 0 221 10 180 41 10 0 141 3 0 0 3 0 1 227 0 238 0 9 9 1 0 0 0 0]]


[82 99 216 6 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 72 80 58 32 48 47 53 53 0 124 32 0 0 0 0 0 196 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 82 99 216 6 0 0 0 0 144 1 0 0 0 0 0 0 0 0 89 4 0 0 0 0 0 0 0 0 0 0 0 0 169 243 137 134 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 55 142 211 120 237 136 0 0 3 0 0 0 55 0 0 0 0 0 0 0 0 0 0 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 10 1 0 48 21 38 0 0 0 0 0 203 10 2 0 58 202 31 0 0 0 0 0 204 10 74 188 30 0 6 0 0 0 0 0 0 0 1 0 0 0 204 10 74 188 30 0 4 0 0 0 0 0 0 0 2 0 0 0 150 1 255 255
82 99 216 6 0
221 10 90 52 10 0 70 2 0 0 0 0 1
221 0 238 0 3 3 3 0 0 0 0 221 10 91 52 10 0 5 2 0 0 0 0 1
222 0 236 0 3 3 2 0 0 0 0 221 10 92 52 10 0 141 3 0 0 3 0 1
226 0 239 0 6 9 3 0 0 0 0 176 0 24 0 207 29 0 0 175 0 24 0 3 0
222 0 238 0 9 3 1 0 0 0 0]]


 233 136 0 0 4 0 0 0 88 0 0 0 0 0 0 0 0 0 0
 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 203 10 1 0 55 21 38 0 0 0 0 0
 203 10 2 0 58 202 31 0 0 0 0 0
 204 10 74 188 30 0 7 0 0 0 0 0 0 0 1 0 0 0
 204 10 74 188 30 0 6 0 0 0 0 0 0 0 2 0 0 0 150 1 255 255 226 98 216 6 0]]

[[156 43 10 0 70 2 0 0 0 0 1 ]]
[[83 47 10 0 99 2 0 0 2 0 1 225 0 239 0 12 9 7 0 0 0 0 176 0 24 0 61 30 0 0 175 0 24 0 7 0]]
[[89 47 10 0 70 2 0 0 0 0 1 226 0 240 0 12 9 3 0 0 0 0 176 0 24 0 1 30 0 0 175 0 30 0 3 0]]
[[145 47 10 0 5 2 0 0 0 0 1 224 0 240 0 12 3 2 0 0 0 0 176 0 24 0 111 30 0 0 175 0 12 0 2 0]]


mob_hp_info [0x300a]    bb ->   [[82 99 216 6 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 72 80 58 32 48 47 53 53 0 124 32 0 0 0 0 0 140 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 82 99 216 6 0 0 0 0 144 1 0 0 0 0 0 0 0 0 89 4 0 0 0 0 0 0 0 0 0 0 0 0 127 18 134 134 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 56 78 243 136 238 136 0 0 3 0 0 0 55 0 0 0 0 0 0 0 0 0 0 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 203 10 1 0 42 21 38 0 0 0 0 0 203 10 2 0 58 202 31 0 0 0 0 0 204 10 74 188 30 0 6 0 0 0 0 0 0 0 1 0 0 0 204 10 74 188 30 0 4 0 0 0 0 0 0 0 2 0 0 0 150 1 255 255 82 99 216 6 0 221 10 174 43 10 0 70 2 0 0 0 0 1 225 0 240 0 12 3 3 0 0 0 0 221 10 175 43 10 0 149 3 0 0 3 0 1 224 0 240 0 3 12 1 0 0 0 0 221 10 176 43 10 0 141 3 0 0 3 0 1 224 0 238 0 12 9 1 0 0 0 0 221 10 177 43 10 0 201 2 0 0 3 0 1 224 0 238 0 3 6 1 0 0 0 0 221 10 178 43 10 0 141 3 0 0 3 0 1 226 0 238 0 6 3 1 0 0 0 0]]

recv : [0x8700] len [12]
recv : [0x3804] len [10]
recv : [0x8000] len [7]
recv : [0x1a0b] len [38]
recv : [0xb000] len [79]
recv : [0x1a0b] len [36]
recv : [0x300a] len [289]
recv : [0xdd0a] len [24]
recv : [0x8000] len [7]
recv : [0x8600] len [16]
recv : [0x6803] len [6]
recv : [0x300a] len [106]
recv : [0x3804] len [10]
recv : [0x8600] len [16]
recv : [0x1a0b] len [38]
recv : [0x8600] len [16]
recv : [0xb000] len [79]

[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 131 99 216 6      166 1   245 133 134   1 0 0 224 1 0 0  122 2 0 0 10  0 1 0 8      156 0 74 188 30 0 0 0 5]]
 7 0 227 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0  74 188 30 0  70 99 216 6     225 113 243 133 134   1 0 0 1 0 0 0 45 4 0 0 10 0 1  0 8      156 0 74 188 30 0 0 0 3

[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0  74 188 30 0   227 98 216 6   148 81 229 133    134    1 0 0 168 0 0 0  43 6 0 0  10 0 1 0  8      156 0 74  188 30 0 0  0 0]]
[[7 0 216 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0  74 188 30 0   110 99 216 6   87 96 229 133     134     1 0 0 224 1 0 0  114 2 0 0  10 0 1 0  8      156 0 74  188 30 0 0  0 2]]
[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0  74 188 30 0   107 99 216 6   167 116 229 133   134    1 0 0 224 1 0 0  245 1 0 0  10 0 1 0  8      156 0 74  188 30 0 0  0 2]]
[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0  74 188 30 0   215 98 216 6   31 182 229 133   134     1 0 0 168 0 0 0  226 6 0 0  10 0 1 0  8      156 0 74  188 30 0 0  0 6]]

[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0   74 188 30 0    130 99 216 6     84 120 234 133    134 1 0 0   224 1 0 0   166 2 0 0   10 0 1 0 8      156 0 74 188 30 0 0 0 7]]
[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0   74 188 30 0    131 99 216 6     11 6 235 133      134 1 0 0   224 1 0 0   24 2 0 0    10 0 1 0 8      156 0 74 188 30 0 0 0 7]]

 [[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 31 106 211 6   187 107 16   131 134 1 0 0  1   0 0 0 51 3 0 0 10 0 1 0 8      156 0 74 188 30 0 0 0 2]]
 [[7 0 216 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 117 106 211 6   191 128 16  131 134 1 0 0  168 0 0 0 110 5 0 0 10 0 1 0 8      156 0 74 188 30 0 0 0 2]]
 [[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 146 106 211 6   205 67 20   131 134 1 0 0  128 1 0 0 86 4 0 0 10 0 1 0 8      156 0 74 188 30 0 0 0 4]]
 [[7 0 216 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 154 106 211 6   45 82 20    131 134 1 0 0  128 1 0 0 230 4 0 0 10 0 1 0 8      156 0 74 188 30 0 0 0 3]]

 [[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 91 99 216 6 185 252 237 133 134 1 0 0 224 1 0 0 247 1 0 0 10 0 1 0 8      156 0 74 188 30 0 0 0 5]]

chonchon no loot
[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 144 99 216 6 118 86 251 133 134 1 0 0 224 1 0 0  138 2  0 0 10 0 1 0 8 156 0 74 188 30 0 0 0 4]]
[[7 0 212 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 130 99 216 6 67 165 253 133 134 1 0 0 224 1 0 0  203 1  0 0 10 0 1 0 8 156 0 74 188 30 0 0 0 0]]
chonchon shell
[[7 0 232 6 0 0 131 9 46 0 74 188 30 0 1 220 5 0 0 220 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 222 1 15 0 74 188 30 0 124 99 216 6 69 183 251 133 134 1 0 0 224 1 0 0  240 1  0 0 10 0 1 0 8 156 0 74 188 30 0 0 0 0]]


bbb ->  [ 0010101000 0011011111     0010101000  0011100100    1000 1000    001 111 1110000011   0111 0100 1000 0000]
bbb ->  [ 0010011011 0011111101     0010010100  0100000011    1000 1000    000 011 0010001101   0111 0100 1000 0000]
bbb ->  [ 0010100111 0011011011     0010100110  0011011110    1000 1000    111 011 0010010000   0111 0100 1000 0000]
bbb ->  [ 0010001101 0011011101     0010001111  0011011110    1000 1000    111 000 0010010010   0111 0100 1000 0000]
bbb ->  [ 0010101000 0011100100     0010101111  0011100000    1000 1000    001 011 0110011001   0111 0100 1000 0000]
bbb ->  [ 0010001010 0011100110     0010000011  0011101011    1000 1000    100 001 1010011001   0111 0100 1000 0000]
bbb ->  [ 0010000001 0100000011     0010000010  0100000100    1000 1000    010 011 1010011100   0111 0100 1000 0000]
bbb ->  [ 0010001010 0100001111     0010001110  0100001001    1000 1000    111 001 0110100010   0111 0100 1000 0000]
bbb ->  [ 0010010111 0100000100     0010011110  0100000000    1000 1000    000 100 1010100100   0111 0100 1000 0000]
bbb ->  [ 0010010100 0100000011     0010011010  0100000001    1000 1000    000 000 0010101010   0111 0100 1000 0000]
bbb ->  [ 0010000010 0100000100     0001111100  0100001010    1000 1000    100 000 0110101111   0111 0100 1000 0000]
bbb ->  [ 0010011000 0011100110     0010011111  0011100001    1000 1000    000 011 1100001111   0111 1011 1000 0000]
bbb ->  [ 0010100100 0011111100     0010100110  0011111001    1000 1000    110 001 0000011010   0111 1011 1000 0000]
bbb ->  [ 0010001001 0100001010     0010001011  0100001001    1000 1000    101 101 1000011110   0111 1011 1000 0000]
bbb ->  [ 0010001101 0100000101     0010010000  0011111111    1000 1000    011 111 0000011111   0111 1011 1000 0000]
bbb ->  [ 0010100110 0011111001     0010100110  0011111100    1000 1000    111 011 0000101101   0111 1011 1000 0000]
bbb ->  [ 0101101110 0010111011     0101100111  0010111000    1000 1000    001 000 1101000110   0111 1011 1000 0000]
bbb ->  [ 0101101100 0010110001     0101101111  0010111000    1000 1000    000 001 0001001010   0111 1011 1000 0000]
bbb ->  [ 0101010101 0011011101     0101010101  0011100010    1000 1000    111 111 0001100100   0111 1011 1000 0000]
bbb ->  [ 0101010111 0011010100     0101010100  0011001110    1000 1000    011 000 1101100101   0111 1011 1000 0000]
bbb ->  [ 0101010010 0011101110     0101001101  0011101111    1000 1000    101 011 0101111001   0111 1011 1000 0000]
bbb ->  [ 0101010101 0011100010     0101010010  0011100000    1000 1000    100 010 0001111010   0111 1011 1000 0000]
  [[115 218 25 0 148 3 0 0 3 0 1 252 0 85 0 6 6 1 0 0 0 0
    134 0 230 31 213 6 64 6 19 244 86 136 135 145 44 131]]
  [[58 219 25 0 141 3 0 0 3 0 1 249 0 96 0 6 12 1 0 0 0 0]]
 [[74 188 30 0 2 74 6 0 0 54 8 0 0 8 11 6 0 0 0 9 11 39 0 0 18 0 205 2 0 0 3 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 10 11 218 1 0 3 0 254 8 0 0 4 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 4 0 54 8 0 0 4 32 0 0 0 32 0 0 0 0 28 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 5 0 197 8 0 0 4 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 12 0 35 9 0 0 4 16 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 19 0 74 6 0 0 5 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 21 0 47 10 0 0 4 136 0 0 0 128 0 0 0 0 200 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 22 0 218 9 0 0 4 4 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 11 0 0 131 9 56 3 74 188 30 0 1 0 0 0 0 0 0 0 0 193 179 52 1 0 0 0 0 0 0 0 0 59 10 9 0 74 188 30 0 1 176 0 24 0 194 6 0 0 176 0 25 0 236 94 0 0 255 9 108 0 0 56 172 30 0 184 210 2 0 157 0 0 0 0 0 0 0 0 0 5 0 2 0 72 5 0 0 0 0 0 0 0 0 122 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 27 133 96 5 5 0 51 0 0 0 255 255 255 255 255 255 255 255 0 0 0 75 97 114 111 115 104 105 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 56 172 30 0 68 101 97 116 104 32 98 121 32 87 111 114 107 105 110 103 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 56 3 56 172 30 0 1 15 39 0 0 245 214 52 1 0 0 0 0 0 0 0 0 63 4 161 2 56 172 30 0 1 15 39 0 0 1 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 56 172 30 0 1 255 9 108 0 0 232 145 30 0 42 119 2 0 202 0 0 0 0 0 0 0 0 0 5 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 24 133 192 5 5 0 23 0 0 0 255 255 255 255 255 255 255 255 0 0 0 87 86 86 86 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 232 145 30 0 66 76 85 32 72 69 82 66 44 32 105 108 108 117 115 105 111 110 44 32 114 108 101 97 102 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 56 3 232 145 30 0 1 15 39 0 0 232 214 52 1 0 0 0 0 0 0 0 0 63 4 161 2 232 145 30 0 1 15 39 0 0 1 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 232 145 30 0 1 255 9 108 0 0 115 135 30 0 194 204 2 0 195 0 0 0 0 0 0 0 0 0 5 0 6 0 86 4 0 0 0 0 0 0 120 6 107 8 12 0 6 0 0 0 0 0 0 0 56 0 0 0 4 0 0 0 0 0 0 0 0 1 25 133 192 5 5 0 51 0 0 0 255 255 255 255 255 255 255 255 0 0 0 109 105 107 105 109 97 117 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 115 135 30 0 97 65 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 161 2 115 135 30 0 1 15 39 0 0 2 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 115 135 30 0 1 255 9 108 0 0 158 189 30 0 140 12 3 0 195 0 0 0 0 0 0 0 0 0 5 0 6 0 80 4 0 0 55 8 0 0 0 0 122 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 133 224 5 5 0 26 0 0 0 255 255 255 255 255 255 255 255 0 0 0 78 97 107 97 109 111 116 111 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 158 189 30 0 77 69 82 77 65 78 32 97 110 100 32 69 77 80 79 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 56 3 158 189 30 0 1 15 39 0 0 106 179 52 1 0 0 0 0 0 0 0 0 63 4 161 2 158 189 30 0 1 15 39 0 0 1 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 158 189 30 0 1 255 9 108 0 0 193 173 30 0 105 213 2 0 202 0 0 0 0 0 0 0 0 0 5 0 17 0 193 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 27 133 192 5 5 0 23 0 0 0 255 255 255 255 255 255 255 255 0 0 0 77 79 78 84 69 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 193 173 30 0 66 76 65 67 75 32 70 82 73 68 65 89 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 56 3 193 173 30 0 1 15 39 0 0 164 178 52 1 0 0 0 0 0 0 0 0 63 4 161 2 193 173 30 0 1 15 39 0 0 1 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 193 173 30 0 1 255 9 108 0 0 234 192 30 0 17 26 3 0 165 0 0 0 0 0 0 0 0 0 5 0 22 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 133 160 5 5 0 31 0 0 0 255 255 255 255 255 255 255 255 0 0 0 69 109 112 114 101 115 97 114 105 111 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 234 192 30 0 65 79 79 79 79 79 80 65 65 65 65 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 56 3 234 192 30 0 1 15 39 0 0 246 214 52 1 0 0 0 0 0 0 0 0 63 4 161 2 234 192 30 0 1 15 39 0 0 1 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 234 192 30 0 1 255 9 108 0 0 118 171 30 0 220 206 2 0 150 0 0 0 0 0 0 0 0 0 5 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 133 128 5 5 0 53 0 0 0 255 255 255 255 255 255 255 255 0 0 0 86 101 110 100 105 110 103 81 117 101 101 110 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 118 171 30 0 78 101 119 32 80 108 97 121 101 114 32 83 104 111 112 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 63 4 161 2 118 171 30 0 1 15 39 0 0 1 0 0 0 0 0 0 0 0 0 0 0 59 10 9 0 118 171 30 0 1 255 9 108 0 0 142 195 30 0 209 37 3 0 150 0 0 0 0 0 16 0 0 0 11 0 6 0 178 6 0 0 0 0 0 0 0 0 0 0 0 0 7 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 30 197 243 5 5 2 60 0 0 0 255 255 255 255 255 255 255 255 0 0 0 84 97 108 111 110 102 108 97 109 101 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 63 4 184 2 142 195 30 0 1 15 39 0 0 0 0 0 0 2 0 0 0 0 0 0 0 59 10 9 0 142 195 30 0 1 255 9 108 0 0 253 156 30 0 64 157 2 0 112 0 0 0 0 0 0 0 0 0 10 0 30 0 83 5 0 0 0 0 0 0 56 0 151 0 125 0 64 0 144 1 0 0 0 0 56 0 0 0 4 0 0 0 2 0 0 0 0 0 22 6 119 5 5 0 92 0 0 0 255 255 255 255 255 255 255 255 0 0 0 68 111 98 114 111 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 15 1 253 156 30 0 7 144 1 0 0 0 0 0 0 63 4 184 2 253 156 30 0 1 15 39 0 0 0 0 0 0 1 0 0 0 0 0 0 0 63 4 161 2 253 156 30 0 1 15 39 0 0 2 0 0 0 0 0 0 0 0 0 0 0 63 4 56 3 253 156 30 0 1 15 39 0 0 73 215 52 1 0 0 0 0 0 0 0 0 59 10 9 0 253 156 30 0 1 255 9 108 0 7 143 210 209 6 0 0 0 0 150 0 0 0 0 0 0 0 0 0 25 4 100 0 0 0 0 0 0 0 0 0 28 39 0 0 0 0 0 0 0 0 0 0 0 0 56 0 0 0 4 0 0 0 0 0 0 0 0 0 22 70 96 0 0 0 0 0 0 0 255 255 255 255 255 255 255 255 0 0 0 90 108 111 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 164 1 3 143 210 209 6 28 39 0 0 255 9 108 0 0 164 137 30 0 162 92 2 0 202 0 0 0 0 0 0 0 0 0 5 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 25 134 64 5 5 0 20 0 0 0 255 255 255 255 255 255 255 255 0 0 0 109 121 102 111 114 103 101 114 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 49 1 164 137 30 0 70 82 69 69 69 69 69 69 69 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]



 [[74 188 30 0 2 74 6 0 0 54 8 0 0 8 11 6 0 0 0 9 11 73 0 0 2 0 90 2 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 18 0 205 2 0 0 3 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 10 11 218 1 0 3 0 254 8 0 0 4 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 4 0 54 8 0 0 4 32 0 0 0 32 0 0 0 0 28 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 5 0 197 8 0 0 4 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 29 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 12 0 35 9 0 0 4 16 0 0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 19 0 74 6 0 0 5 2 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 21 0 47 10 0 0 4 136 0 0 0 128 0 0 0 0 200 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 22 0 218 9 0 0 4 4 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 11 11 0 0 131 9 56 3 74 188 30 0 1 0 0 0 0 0 0 0 0 193 179 52 1 0 0 0 0 0 0 0 0 59 10 9 0 74 188 30 0 1 176 0 24 0 38 7 0 0 176 0 25 0 236 94 0 0 255 9

       108 0 5 179 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 71 180 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255  0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 255 9 108 0 5 172 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 7 230 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 255 9 108 0 5 34 104 209 6 0 0 0 0 44 1 0 0 0 0 0 0 0 0 31 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 71 226 0 0 0 17 0 0 0 255 255 255 255 255 255 255 255 0 0 0 77 117 107 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 255 9 108 0 5 170 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 200 80 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 193 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 76 3 178 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 72 34 20 128 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 255 9 108 0 5 226 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 26 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 72 34 0 0 0 4 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
 255 9 108 0 5 139 103 209 6 0 0 0 0 232 3 0 0 0 0 0 0 0 0 23 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 30 72 144 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 101 99 111 32 80 101 99 111 32 69 103 103 0 0 0 0 0 0 0 0 0 0 0 253 9 114 0 5 37 104 209 6 0 0 0 0 44 1 0 0 0 0 0 0 0 0 31 4 0 0 0 0 0 0 0 0 0 0 0 0 76 3 178 128 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 73 177 208 155 136 0 0 17 0 0 0 255 255 255 255 255 255 255 255 0 0 0 77 117 107 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 65 1 13 0 0 0 1 0 0 0 1 0 0 0 65 1 14 0 0 0 70 0 0 0 13 0 0 0 65 1 15 0 0 0 1 0 0 0 1 0 0 0 65 1 16 0 0 0 99 0 0 0 15 0 0 0 65 1 17 0 0 0 39 0 0 0 6 0 0 0 65 1 18 0 0 0 1 0 0 0 2 0 0 0 155 9 40 0 0 2 0 0]]

[[114 0 5   41 209 205 6 0 0 0 0 144 1 0 0 0 0 0 0 0 0 89 4 0 0 0 0 0 0 0 0 0 0 0 0 97 165 25 126 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 76 141 148 200 216 136 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[108 0 5   228 209 205 6 0 0 0 0 44 1 0 0 0 0 0 0 0 0 31 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 76 142 2 0 0 0 17 0 0 0 255 255 255 255 255 255 255 255 0 0 0 77 117 107 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 135 0 97 165 25 126 71 14 164 144 240 136]]

vv ->   [[108 0 5 163 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 27 69 6 0 0 0 3 0 0 0 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
vv ->   [[108 0 5 1 104 209 6 0 0 0 0 44 1 0 0 0 0 0 0 0 0 31 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 28 3 38 0 0 0 17 0 0 0 255 255 255 255 255 255 255 255 0 0 0 77 117 107 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
#--- in lock map ---#
#--- in lock map ---#


[[253 9 114 0 5 76 103 209 6 0 0 0 0 144 1 0 0 0 0 0 0 0 0 89 4 0 0 0 0 0 0 0 0 0 0 0 0 62 66 2 129 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 11 199 32 160 118 136 0 0 3 0 0 0
255 255 255 255 255 255 255 255 0 0 0 68 114 111 112 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]

[[108 0 5      154 103 209 6 0 0 0 0 200 0 0 0 0 0 0 0 0 0 25 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 19 135 16 0 0 0 3 0 0 0
 255 255 255 255 255 255 255 255 0 0 0 80 105 99 107 121 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]



  [[180 103 209 6 93 203 213 196 192 136 99 230 248 128
                          134 0   252 103 209 6 87 140 69  96 189 136 99 230 248 128]]
  [[46 104 209 6 86 204 133 120 202 136 225 231 248 128]]
  [[180 103 209 6 90 204 133 156 205 136 186 188 249 128 134 0 46 104 209 6 92 13 21 204 206 136 186 188 249 128]]
  [[40 104 209 6 89 204 101 136 202 136 135 193 249 128]]
  [[178 103 209 6 88 10 197 120 168 136 229 198 249 128]]
  [[224 103 209 6 87 204 69 140 191 136 171 199 249 128]]
  [[46 104 209 6 92 204 229 184 210 136 177 210 249 128]]
  [[252 103 209 6 86 11 37 92 174 136 217 211 249 128 134 0 180 103 209 6 89 204 213 160 199 136 217 211 249 128]]


[[160 209 205 6 86 198 197 108 113 136 70 53 91 126
    134 0
   89 209 205 6 89 134 245 148 109 136 70 53 91 126]]

  [183 209 205 6 80 144 228 2
  49 15 136 175 225 93 126
  255 9
  108 0 5 244 209 205 6 0 0 0 0 44 1 0 0 0 0 0 0 0 0 31 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 80 144 112 0 0 0 17 0 0 0 255 255 255 255 255 255 255 255 0 0 0 77 117 107 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
  actor_moved [0x8600]    bb ->   [[85 209 205 6 74 143 164 196 254 136 190 34 101 126]]
  actor_moved [0x8600]    bb ->   [[235 209 205 6 67 143 212 61 4 136 10 37 101 126]]
  actor_moved [0x8600]    bb ->   [[95 209 205 6 66 78 100 28 235 136 237
  49 101 126]]
  actor_moved [0x8600]    bb ->   [[66 209 205 6 77 77 164 232 217 136 206 53 101 126]]
  actor_moved [0x8600]    bb ->   [[186 209 205 6   77 204 132  216 205 136 252 56      101 126]]
  actor_moved [0x8600]    bb ->   [[114 209 205 6   85 77 21    92 202 136 70 77        101 126]]


actor_appear1 [0xff09]  bb ->
[[    108 0     0 110 141 30 0      127 115 2 0 150 0 0 0 0 0 0 0 0 0 16 0 9 0 109 60 1 0 54 8 0 0 0 0 120 8 73 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 18 200 113 5 5 0 86            0 0 0 255 255 255 255 255 255 255 255 0 0 0     82 97 115 112 117   116 105 110 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0     63 4 184 2 110 141 30 0 1 15 39 0 0 0 0 0 0 2 0 0 0 0 0 0 0 63 4 56 3 110 141 30 0 1 15 39 0 0 230 214 52 1 0 0 0 0 0 0 0 0 59 10 9 0 110 141 30 0 1]]
bb ->   [ln▒s▒  m<I▒qV▒▒▒▒▒▒▒▒Rasputin?▒n▒'?8n▒'▒▒4;


backend := imgui.CreateBackend(imgui.NewGLFWBackend())
backend.GLFWInitForOpenGL()
backend.SetAfterCreateContextHook(func () {
    // texture = imgui.NewTextureFromRgba(img)
    // imgui.PlotCreateContext()
})
backend.SetBeforeDestroyContextHook(func () {
    imgui.PlotDestroyContext()
})
backend.SetBgColor(imgui.NewVec4(0.45, 0.55, 0.6, 1.0))
backend.CreateWindow("Hello from cimgui-go", 400, 800)
backend.SetCloseCallback(func(b imgui.Backend[imgui.GLFWWindowFlags]) {
    // exit
})
var labelText string = "Hello, world!"
backend.Run(func () {
    if imgui.ButtonV("Click Me", imgui.NewVec2(80, 20)) {
        w, h := backend.DisplaySize()
        fmt.Println(w, h)
        labelText = "toto"
    }
    imgui.Text(labelText)
})
// part1 := coordList[0:k]
// part2 := linearInterpolation(curCoord, coordList[best])
// part3 := coordList[best:]
//
// coordList = []Coord{}
// coordList = append(coordList, part1...)
// coordList = append(coordList, part2...)
// coordList = append(coordList, part3...)

// bestCandidate := Coord{}
// bestCandidateDist := 0
// dist := 0
// for _,bPoint := range candidates {
// for _,curCoord := range coordList {
// 	dist++
// }}

// rndDirections := secondCircle(curCoord)
// rand.Seed(time.Now().UnixNano())
// rn := rndDirections[rand.Intn(len(rndDirections))]
// rndCell := linearInterpolation(curCoord,rn)[1]
//
// gatCell = gatMap.cells[rndCell.X][rndCell.Y]
// if isValidCell(gatCell) {
// if !isIn(rndCell,visited)	{
// 	coordList = append(coordList, rndCell);
// }}

// rndDirections := firstCircle(curCoord)
// for _,v := range rndDirections {
// 	gatCell = gatMap.cells[v.X][v.Y]
// 	if isValidCell(gatCell) {
// 	if !isIn(v,visited)	{
// 		coordList = append(coordList, v)
// 		break
// 	}}
// }




// nodePath := []Node{}
//
// startNode := Node{ coord: start, nextNods: []Node{} }
// nodePath = append(nodePath, startNode)
//
// i:= 0
// theend:
// for {
// 	i++; if i > 200 {
// 		break theend
// 	}
//
//
// 	curNode := &nodePath[len(nodePath)-1]
//
// 	SCoords := findinSIght(curNode.coord)
// 	for _, v := range SCoords {
// 		// if v ==  finish { return }
// 		gatCell := gatMap.cells[v.X][v.Y]
// 		if isValidCell(gatCell) {
// 			curNode.sightedCoords = append(curNode.sightedCoords, v)
// 		}
// 	}
//
// 	NCoords := findNextCoords(curNode.coord)
// 	for _, v := range NCoords {
// 		gatCell := gatMap.cells[v.X][v.Y]
// 		if isValidCell(gatCell) {
// 			found := false
// 			for _, nd := range nodePath {
// 			for _, sc := range nd.sightedCoords {
// 				if v == sc { found = true }
// 			}}
// 			if !found {
// 				newNode := Node{ coord: v, nextNods: []Node{}, sightedCoords: []Coord{} }
// 				curNode.nextNods = append(curNode.nextNods, newNode)
// 			}
// 		}
// 	}
//
// 	// fmt.Printf("curNode -- %v -- \n", curNode.sightedCoords)
// 	if len(curNode.nextNods) > 0 {
// 		rand.Seed(time.Now().UnixNano())
// 		next := curNode.nextNods[rand.Intn(len(curNode.nextNods))]
//
// 		// curNode.sightedCoords = append(curNode.sightedCoords, next.coord)
//
// 		nodePath = append(nodePath, next)
// 	}else{
// 		nodePath = nodePath[:len(nodePath)-1]
// 	}
//
//
// 	// if count(curNode.nextNods) == 0 {
// 	// 	nodePath = nodePath[:len(nodePath)-1]
// 	// }else{
//
// 	// }
// 	//
// 	// // curNode.sightedNods =
// 	// curNode.nextNods = findinSIght(curNode.coord)
//
//
// }
//
//
// coordList := []Coord{}
// // for _, v := range nodePath {
// // for _, vv := range v.sightedCoords {
// // 	coordList = append(coordList, vv)
// // }}
//
// fmt.Printf("nik \n")
//
// // coordList := {}
// // for _, v := range nodePath {
// // 	coordList = append(coordList, v.coord)
// // }
//
// return coordList


// sighDist := 2
// discovered := []Coord{}
// curpath := []Node{}
// curpath = append(curpath, startNode)
//
//
// i:= 0
// theend:
// for {
// 	curNode := curpath[len(curpath)-1]
// 	// parent := curpath[len(curpath)-2]
// 	if curNode.coord == finish { break }
//
// 	discovered = append(discovered, curNode.coord)
//
// 	points := allPointsInSight(sighDist)
//
// 	if len(curNode.childs) <= 0 {
// 		for _,v := range points {
// 			childcoord := Coord{curNode.coord.X + v.X, curNode.coord.Y + v.Y}
// 			if childcoord == finish{ break theend }
// 			childcell := gatMap.cells[childcoord.X][childcoord.Y]
// 			newChild := Node{ coord: childcoord, childs: []Node{} , isValid: isValidCell(childcell)}
// 			if newChild.coord == parent.coord { newChild.isValid = false }
// 			curNode.childs = append(curNode.childs, newChild)
// 		}
// 	}
//
//
// 	nbValidChild := 0
// 	for _,v := range curNode.childs {
// 		if v.isValid {
// 			discovered = append(discovered, curNode.coord)
// 			nbValidChild ++
// 		}
// 	}
//
//
// 	// 	break
// 	// // fmt.Printf("curNode.coord -- %v -- \n", curNode.coord)
// 	//
// 	// i++; if i > 100000 {
// 	// 	// fmt.Printf("curNode -- %v -- \n", curNode)
// 	// 	break theend
// 	// }
// 	//
// 	// // fmt.Printf("curNode -- %v -- \n", curNode)
// 	//
// 	//
// 	// //
//
//
//
//
// 	for _,v := range curNode.childs {
// 		if v.isValid { nbValidChild ++ }
// 	}
//
// 	if nbValidChild == 0 {
// 		curNode.isValid = false
// 		curpath = curpath[:len(curpath)-1]
// 	}else{
// 		rand.Seed(time.Now().UnixNano())
// 		v := curNode.childs[rand.Intn(len(curNode.childs))]
// 		if v.isValid && !isIn(v.coord, discovered){ curpath = append(curpath, v) }
//
// 	}
//
// }
// // fmt.Printf("curpath -- %v -- \n", curpath)
//
// for _, v := range curpath {
// 	bestpath = append(bestpath, v.coord)
// }
//
// fmt.Printf("nik -- %v -- \n")

func prepareGat(gatMap *ROGatMap){
	for x := 1; x < gatMap.width -1; x++{
	for y := 1; y < gatMap.height -1; y++{
		curCell := Coord{X: x, Y: y}
		if isValidCell(gatMap.cells[x][y]) {
		closeCells := firstCircleVectors()
			for _,v := range closeCells {
				vCell := Coord{X:curCell.X + v.X, Y:curCell.Y + v.Y }
				oppositeCell := Coord{X:curCell.X + (v.X*-1), Y:curCell.Y +  (v.Y*-1)}
				if vCell.X > gatMap.width -1 || vCell.Y > gatMap.height -1 { continue }
				if vCell.X < 0 || vCell.Y < 0 { continue }
				if !isValidCell(gatMap.cells[vCell.X][vCell.Y]){
				if isValidCell(gatMap.cells[oppositeCell.X][oppositeCell.Y]){
					gatMap.cells[x][y].cell_type = 2
					break;
				}}
			}
		}
	}}
}
// visited := []Coord{}
// available := []Coord{{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {1, 1}, {1, -1}, {-1, 1}}
//
//
// var beams [][]Coord
//
// firstbeam := []Coord{}
// firstbeam = append(firstbeam, Coord{1, 1})	// beam[0] = direction of beam
// firstbeam = append(firstbeam, from)
// beams = append(beams, firstbeam)
//
// beamMax := 20
//
// i:= 0
// theend:
// for {
// i++; if i > 200 {
// 	break theend
// }
// for k, beam := range beams {
// 	// fmt.Printf("beam -- %v -- \n", beam)
// 	lastCoord := beam[len(beam)-1]
// 	direction := beam[0]
// 	nextCoord := Coord{lastCoord.X + direction.X, lastCoord.Y + direction.Y}
// 	// fmt.Printf("lastCoord -- %v -- \n", lastCoord)
// 	if isIn(lastCoord,visited) {
// 		beams = append(beams[:k], beams[k+1:]...) ; break
// 		beamMax ++
// 	}
//
// 	if lastCoord == finish {
// 		fmt.Printf("theend \n")
// 		break theend
// 	}
// 	gatCell := gatMap.cells[nextCoord.X][nextCoord.Y]
// 	if isValidCell(gatCell) {
// 		beams[k] = append(beams[k], nextCoord)
// 		// fmt.Printf("beam -- %v -- \n", beam)
// 	}else{
//
// 		visited = append(visited, lastCoord)
// 		if beamMax < 0 { continue }
// 		// nb_available := 0
// 		for _,v := range available {
// 			availableCoord := Coord{lastCoord.X + v.X, lastCoord.Y + v.Y}
// 			availablegatCell := gatMap.cells[availableCoord.X][availableCoord.Y]
// 			if isValidCell(availablegatCell) && availableCoord != lastCoord {
// 				newbeam := []Coord{}
// 				newbeam = append(newbeam, Coord{v.X, v.Y})
// 				newbeam = append(newbeam, availableCoord)
// 				beams = append(beams, newbeam)
// 				beamMax --
// 			}
// 		}
// 	}
//
// }}
//
// for _, beam := range beams {
// for k,cds := range beam {
// 	if k == 0 { continue }
// 	bestpath = append(bestpath, cds)
// }}
//


// for {
// 	last := path[len(path)-1]
// 	// fmt.Printf(" -- last -- %v \n", last)
// 	neighbors := []Coord{{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {1, 1}, {1, -1}, {-1, 1}}
// 	bestdist := dist(last, finish)
// 	bestneighbor := Coord{}
// 	for _, dir := range neighbors {
// 		neighbor := Coord{last.X + dir.X, last.Y + dir.Y}
// 		if isIn(neighbor,banned) { continue }
// 		distneighbor := dist(neighbor, finish)
// 		gatCell := gatMap.cells[neighbor.X][neighbor.Y]
// 		if distneighbor < bestdist && isValidCell(gatCell) {
// 			bestdist = distneighbor
// 			bestneighbor = neighbor
// 		}
// 	}
// 	if bestneighbor == (Coord{}) {

// 		// neighbor := Coord{last.X + rndneighbor.X, last.Y + rndneighbor.Y}
//
// 		// if isValidCell(gatCell) && !isIn(neighbor,path) {
// 		// 	path = append(path,neighbor)
// 		// }
// 		path = path[:len(path)-1]
// 		banned = append(banned,last)
// 	}else{
// 		path = append(path,bestneighbor)
// 	}
//
// 	if last == finish { break }
// }
// file, err := os.Open(utils.CurDir()+"packetlist.txt")
// if err != nil { fmt.Printf("err -- %v -- \n", err) }
// defer file.Close()
//
//
// packets := make(map[int]Packet)
//
// scanner := bufio.NewScanner(file)
// scanner.Scan()
// for scanner.Scan() {
//     line := scanner.Text()
//     ss := string(line)
//     ss = ss+ "+++++++++++++++++++++++++++++++++++++++++++++"
//     ss = ss+ "+++++++++++++++++++++++++++++++++++++++++++++"
//
//     if ss[0:4] == "++++" {
//         continue
//     }
//         packets[utils.Stoi(ss[0:4])] = Packet{
//             utils.Stoi(strings.Replace(ss[5:8], " ", "", -1)),
//             ss[9:13],
//             strings.Replace(ss[45:75], "+", "", -1),
//             ""}
// }
//
//
// file2, _ := os.Open(utils.CurDir()+"packetdescriptions.txt")
//
// defer file2.Close()
//
// scanner2 := bufio.NewScanner(file2)
//
// for scanner2.Scan() {
//     line := scanner2.Text()
//     ss := string(line)
//     ss = ss+ "+++++++++++++++++++++++++++++++++++++++++++++"
//     ss = ss+ "+++++++++++++++++++++++++++++++++++++++++++++"
//     ss = ss+ "+++++++++++++++++++++++++++++++++++++++++++++"
//     ss = ss+ "+++++++++++++++++++++++++++++++++++++++++++++"
//
//
//         pp := packets[utils.Stoi(ss[0:4])]
//         pp.Desc = strings.Replace(ss[5:128], "+", "", -1)
//         packets[utils.Stoi(ss[0:4])] = pp
//
// }
//
// // for p := range packets {
// //     fmt.Printf("p -- %v -- %v \n", p, packets[p])
// // }
// //
// // utils.WriteFileString(utils.CurDir()+"packets.json",utils.EncodeJSON(packets))


// ########################
backend := imgui.CreateBackend(imgui.NewGLFWBackend())
backend.SetAfterCreateContextHook(func () {
    // maps, _ := ioutil.ReadDir(CurDir()+"data/gats/")
    // for _, m := range maps {
    //     if !m.IsDir() {
    //         // strings.Split(string(bb), ".gat")[0]
    //         // fmt.Printf("m -- %v -- \n", m.Name())
    //         loadGatTexture(m.Name())
    //     }
    // }
    // loadGatTexture("morocc")
    // loadGatTexture("payon")
    // loadGatTexture("moc_fild10")
    // loadGatTexture("moc_fild09")
    // loadGatTexture("moc_fild15")
    // loadGatTexture("moc_fild12")
    // loadGatTexture("moc_fild18")
    // loadGatTexture("in_sphinx1")
})

backend.SetBeforeDestroyContextHook(func () {  })
backend.SetBgColor(imgui.NewVec4(0.45, 0.55, 0.6, 1.0))
backend.CreateWindow("ROBOTGO", 300, 800)

backend.Run(func () {
    basePos := imgui.MainViewport().Pos()
    baseSize := imgui.MainViewport().Size()
    imgui.SetNextWindowPosV(imgui.NewVec2(basePos.X, basePos.Y), 0, imgui.NewVec2(0, 0))
    imgui.SetNextWindowSize(imgui.Vec2{X: baseSize.X, Y: baseSize.Y})
    imgui.Begin("robot")
    imgui.Text(fmt.Sprintf("Coords = X : %v / Y : %v", curCoord.X, curCoord.Y ))
    imgui.Text(fmt.Sprintf("Map : %v", curMap ))
    imgui.Text(fmt.Sprintf("Mobs ---- \n\n" ))

    imgui.Text(fmt.Sprintf("%v \n", prettyPrint(mobList) ))



    // if curMap != "" {
    //     imgui.ImageV(mapTextures[curMap].ID(), imgui.NewVec2(float32(baseSize.X/2),float32(baseSize.Y/2)), imgui.NewVec2(0, 0), imgui.NewVec2(1, 1), imgui.NewVec4(1, 1, 1, 1), imgui.NewVec4(0, 0, 0, 0))
    // }
    //
    // if maskTexture != nil {
    //     imgui.ImageV(maskTexture.ID(), imgui.NewVec2(float32(baseSize.X/2),float32(baseSize.Y/2)), imgui.NewVec2(0, 0), imgui.NewVec2(1, 1), imgui.NewVec4(1, 1, 1, 1), imgui.NewVec4(0, 0, 0, 0))
    // }
    // if imgui.ButtonV("Click Me", imgui.NewVec2(80, 20)) {
    //     w, h := backend.DisplaySize()
    //     fmt.Println(w, h)
    //     // labelText = "toto"
    // }
    // imgui.Text(labelText)
    imgui.End()
    imgui.Render()
})




                if maskTexture == nil  {
                    img := image.NewRGBA(image.Rect(0, 0, lgatMaps[curMap].width, lgatMaps[curMap].height))
                    for x := 0; x < lgatMaps[curMap].width; x++{
                    for y := 0; y < lgatMaps[curMap].height; y++{
                        R := 255; G := 255; B := 255; A := 255;
                        for _,vv := range curPath {
                            if vv.X == x && vv.Y == y {
                                R = 0; G = 0; B = 0;  A = 0; break
                            }
                        }
                        c := color.RGBA{ R:uint8(R), G:uint8(G), B:uint8(B), A:uint8(A) }
                        img.SetRGBA(x , (lgatMaps[curMap].height-1) - y , c)
                    }}
                    maskTexture = imgui.NewTextureFromRgba(img)
                }
